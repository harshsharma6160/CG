#include <GL/glut.h>
#include<math.h>
#include <stdio.h>
void init()
{
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 200.0, 0.0, 150.0);
}
void bresenhamLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x, y;
    int d = 2 * dy - dx;
    int incrE = 2 * dy;
    int incrNE = 2 * (dy - dx);

    if (x1 > x2) {
        x = x2;
        y = y2;
        x2 = x1;
    }
    else {
        x = x1;
        y = y1;
    }

    glBegin(GL_POINTS);
    glVertex2i(x, y);

    while (x < x2) {
        x++;
        if (d < 0) {
            d += incrE;
        }
        else {
            y++;
            d += incrNE;
        }
        glVertex2i(x, y);
    }
    glEnd();
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0, 0.0, 1.0);
    bresenhamLine(100, 100, 180, 100);
    bresenhamLine(100, 100, 100, 90);
    bresenhamLine(180, 100, 180, 90);
    bresenhamLine(100, 90, 130, 90);
    bresenhamLine(180, 90, 150, 90);
    bresenhamLine(130, 90, 130, 20);
    bresenhamLine(150, 90, 150, 20);
    bresenhamLine(130, 20, 150, 20);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bresenham Line Drawing Algorithm");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}